        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:27
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3177715 returned 100% blocks executed 100%
  3177715:    8:int compare(const void* a, const void* b) {
  3177715:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
   152009:   10:    return 1;
  3025706:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
   269280:   12:    return -1;
  2756426:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 48006 returned 100% blocks executed 89%
    48006:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    48006:   44:  SelectStream(1);
call    0 returned 100%
    48006:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    48006:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 41% (fallthrough)
branch  3 taken 59%
        -:   49:    {
    19482:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    28524:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   313764:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  3137640:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  2852400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    28524:   73:  if (numPlayers == 2)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -:   74:    {
    18771:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     9753:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
     9753:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    28524:   87:  if (numPlayers == 2)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -:   88:    {
    18771:   89:      state->supplyCount[estate] = 8;
    18771:   90:      state->supplyCount[duchy] = 8;
    18771:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     9753:   95:      state->supplyCount[estate] = 12;
     9753:   96:      state->supplyCount[duchy] = 12;
     9753:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    28524:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    28524:  102:  state->supplyCount[silver] = 40;
    28524:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   599004:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  4706460:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  4421220:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   285240:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   285240:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   285240:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  4135980:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    95325:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
    66801:  140:      state->deckCount[i] = 0;
   267204:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   200403:  143:	  state->deck[i][j] = estate;
   200403:  144:	  state->deckCount[i]++;
        -:  145:	}
   534408:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   467607:  148:	  state->deck[i][j] = copper;
   467607:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    95325:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
    66801:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    95325:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    66801:  166:      state->handCount[i] = 0;
    66801:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   798672:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   770148:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    28524:  182:  state->outpostPlayed = 0;
    28524:  183:  state->phase = 0;
    28524:  184:  state->numActions = 1;
    28524:  185:  state->numBuys = 1;
    28524:  186:  state->playedCardCount = 0;
    28524:  187:  state->whoseTurn = 0;
    28524:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   171144:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   142620:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
    28524:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
    28524:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 208174 returned 100% blocks executed 100%
   208174:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   208174:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   208174:  209:  if (state->deckCount[player] < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   140045:  210:    return -1;
    68129:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1284280:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
  1148022:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  1148022:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1148022:  217:    newDeckPos++;
 60727619:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
 59579597:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1148022:  221:    state->deckCount[player]--;
        -:  222:  }
  1064127:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
   995998:  224:    state->deck[player][i] = newDeck[i];
   995998:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    68129:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 20000 returned 100% blocks executed 53%
    20000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    20000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    20000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    20000:  243:  if ( state->numActions < 1 )
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  244:    {
        2:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    19998:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
    19998:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  253:    {
    19998:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 30000 returned 100% blocks executed 71%
    30000:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    30000:  280:  who = state->whoseTurn;
        -:  281:
    30000:  282:  if (state->numBuys < 1){
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    10082:  285:    return -1;
    19918:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
     6656:  289:    return -1;
    13262:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    13262:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 19998 returned 100% blocks executed 100%
    19998:  315:int handCard(int handPos, struct gameState *state) {
    19998:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    19998:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 19918 returned 100% blocks executed 100%
    19918:  320:int supplyCount(int card, struct gameState *state) {
    19918:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 215998 returned 100% blocks executed 100%
   215998:  346:int whoseTurn(struct gameState *state) {
   215998:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 108000 returned 100% blocks executed 100%
   108000:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
   108000:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
 27224441:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 27116441:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
 27116441:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
   108000:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
   108000:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
    49999:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    58001:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
   108000:  370:  state->outpostPlayed = 0;
   108000:  371:  state->phase = 0;
   108000:  372:  state->numActions = 1;
   108000:  373:  state->coins = 0;
   108000:  374:  state->numBuys = 1;
   108000:  375:  state->playedCardCount = 0;
   108000:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
   648000:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   540000:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
   108000:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
   108000:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 90000 returned 100% blocks executed 82%
    90000:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    90000:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -:  396:    {
    40001:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    49999:  401:  j = 0;
  1299974:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
  1249975:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    49999:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    49999:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1097362 returned 100% blocks executed 100%
  1097362:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  1097362:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   621315:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
   480012:  534:      state->deck[player][i] = state->discard[player][i];
   480012:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
   141303:  538:    state->deckCount[player] = state->discardCount[player];
   141303:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
   141303:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
   141303:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
   141303:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
   141303:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
   141303:  559:    if (deckCounter == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   139976:  560:      return -1;
        -:  561:
     1327:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1327:  563:    state->deckCount[player]--;
     1327:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   956059:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   956059:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   956059:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   956059:  576:    state->deckCount[player]--;
   956059:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   957386:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 13262 returned 100% blocks executed 10%
    13262:  583:int getCost(int cardNumber)
        -:  584:{
    13262:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 100%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    13262:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithy_f called 9000 returned 100% blocks executed 100%
     9000:  646:int smithy_f(int currentPlayer, struct gameState *state, int handPos){
        -:  647:    // FIXME BUG <-- not using the same game state
        -:  648:    //struct gameState *bugState = malloc(sizeof(struct gameState));
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
    36000:  652:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  653:	{
        -:  654:	  //drawCard(currentPlayer, bugState);
    27000:  655:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  656:	}
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, bugState, 0);
     9000:  659:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     9000:  660:    return 0;
        -:  661:}
        -:  662:
function adventurer_f called 9000 returned 100% blocks executed 94%
     9000:  663:int adventurer_f(int drawntreasure, struct gameState *state, int currentPlayer) {
        -:  664:    int cardDrawn; // to hold the top card
     9000:  665:    int z = 0;
        -:  666:    int temphand[MAX_HAND];
        -:  667:    // FIXME BUG <-- should be 2 instead of 3
    55655:  668:    while(drawntreasure<3){
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -:  669:    //while(drawntreasure<2){
    37655:  670:	    if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  671:            // FIXME BUG <-- instead of shuffling the currentPlayer, another player shuffles their deck
       70:  672:            if (currentPlayer == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       70:  673:	            shuffle(currentPlayer + 1, state);
call    0 returned 100%
        -:  674:            else
    #####:  675:	            shuffle(currentPlayer - 1, state);
call    0 never executed
        -:  676:	        //shuffle(currentPlayer, state);
        -:  677:	    }
    37655:  678:	    drawCard(currentPlayer, state);
call    0 returned 100%
    37655:  679:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    37655:  680:	    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 72% (fallthrough)
branch  5 taken 28%
    27000:  681:	      drawntreasure++;
        -:  682:	    else{
    10655:  683:	      temphand[z]=cardDrawn;
    10655:  684:	      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    10655:  685:	      z++;
        -:  686:	    }
        -:  687:      }
    28655:  688:    while(z-1>=0){
branch  0 taken 54%
branch  1 taken 46% (fallthrough)
    10655:  689:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    10655:  690:	    z=z-1;
        -:  691:    }
     9000:  692:    return 0;
        -:  693:}
        -:  694:
function council_room_f called 70000 returned 100% blocks executed 100%
    70000:  695:int council_room_f(int currentPlayer, struct gameState *state, int handPos) {
        -:  696:    int i;
        -:  697:    //+4 Cards
   350000:  698:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  699:	{
   280000:  700:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  701:	}
        -:  702:			
        -:  703:      //+1 Buy
        -:  704:      // FIXME BUG <-- commenting this out
        -:  705:      //state->numBuys++;
        -:  706:			
        -:  707:      //Each other player draws a card
   180087:  708:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 61%
branch  1 taken 39% (fallthrough)
        -:  709:	{
   110087:  710:	  if ( i != currentPlayer )
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:  711:	    {
    70087:  712:	      drawCard(i, state);
call    0 returned 100%
        -:  713:	    }
        -:  714:	}
        -:  715:      //put played card in played card pile
    70000:  716:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  717:			
    70000:  718:      return 0;
        -:  719:}
        -:  720:
function village_f called 0 returned 0% blocks executed 0%
    #####:  721:int village_f(int currentPlayer, struct gameState *state, int handPos){
        -:  722:      //+1 Card
    #####:  723:      drawCard(currentPlayer, state);
call    0 never executed
        -:  724:			
        -:  725:      //+2 Actions
        -:  726:      // FIXME BUG <-- instead of actions, it increments the number of buys
    #####:  727:      state->numActions = state->numBuys + 2;
        -:  728:      //state->numActions = state->numActions + 2;
        -:  729:			
        -:  730:      //discard played card from hand
    #####:  731:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  732:      return 0;
        -:  733:}
        -:  734:
function great_hall_f called 0 returned 0% blocks executed 0%
    #####:  735:int great_hall_f(int currentPlayer, struct gameState *state, int handPos){
        -:  736:      //+1 Card
    #####:  737:      drawCard(currentPlayer, state);
call    0 never executed
        -:  738:			
        -:  739:      //+1 Actions
    #####:  740:      state->numActions++;
        -:  741:			
        -:  742:      //discard card from hand
    #####:  743:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  744:      return 0;
        -:  745:}
        -:  746:
        -:  747:
        -:  748:
function cardEffect called 88000 returned 100% blocks executed 6%
    88000:  749:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  750:{
        -:  751:  int i;
        -:  752:  int j;
        -:  753:  int k;
        -:  754:  int x;
        -:  755:  int index;
    88000:  756:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    88000:  757:  int nextPlayer = currentPlayer + 1;
        -:  758:
    88000:  759:  int tributeRevealedCards[2] = {-1, -1};
        -:  760:  int temphand[MAX_HAND];// moved above the if statement
    88000:  761:  int drawntreasure=0;
        -:  762:  //int cardDrawn;
        -:  763:  //int z = 0;// this is the counter for the temp hand
    88000:  764:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
    48000:  765:    nextPlayer = 0;
        -:  766:  }
        -:  767:
        -:  768:	
        -:  769:  //uses switch to select card and perform actions
    88000:  770:  switch( card ) 
branch  0 taken 10%
branch  1 taken 80%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 10%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  771:    {
        -:  772:    case adventurer:
     9000:  773:        if (adventurer_f(drawntreasure, state, currentPlayer) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     9000:  774:            return 0;
        -:  775:      /*while(drawntreasure<2){
        -:  776:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  777:	  shuffle(currentPlayer, state);
        -:  778:	}
        -:  779:	drawCard(currentPlayer, state);
        -:  780:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  781:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  782:	  drawntreasure++;
        -:  783:	else{
        -:  784:	  temphand[z]=cardDrawn;
        -:  785:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  786:	  z++;
        -:  787:	}
        -:  788:      }
        -:  789:      while(z-1>=0){
        -:  790:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  791:	z=z-1;
        -:  792:      }
        -:  793:      return 0;*/
        -:  794:			
        -:  795:    case council_room:
    70000:  796:        if (council_room_f(currentPlayer, state, handPos) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    70000:  797:            return 0;
        -:  798:    /*
        -:  799:      //+4 Cards
        -:  800:      for (i = 0; i < 4; i++)
        -:  801:	{
        -:  802:	  drawCard(currentPlayer, state);
        -:  803:	}
        -:  804:			
        -:  805:      //+1 Buy
        -:  806:      state->numBuys++;
        -:  807:			
        -:  808:      //Each other player draws a card
        -:  809:      for (i = 0; i < state->numPlayers; i++)
        -:  810:	{
        -:  811:	  if ( i != currentPlayer )
        -:  812:	    {
        -:  813:	      drawCard(i, state);
        -:  814:	    }
        -:  815:	}
        -:  816:			
        -:  817:      //put played card in played card pile
        -:  818:      discardCard(handPos, currentPlayer, state, 0);
        -:  819:			
        -:  820:      return 0;*/
        -:  821:			
        -:  822:    case feast:
        -:  823:      //gain card with cost up to 5
        -:  824:      //Backup hand
    #####:  825:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  826:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  827:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  828:      }
        -:  829:      //Backup hand
        -:  830:
        -:  831:      //Update Coins for Buy
    #####:  832:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  833:      x = 1;//Condition to loop on
    #####:  834:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  835:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  836:	  if (DEBUG)
        -:  837:	    printf("None of that card left, sorry!\n");
        -:  838:
        -:  839:	  if (DEBUG){
        -:  840:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  841:	  }
        -:  842:	}
    #####:  843:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  845:
        -:  846:	  if (DEBUG){
        -:  847:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  848:	  }
        -:  849:	}
        -:  850:	else{
        -:  851:
        -:  852:	  if (DEBUG){
        -:  853:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  854:	  }
        -:  855:
    #####:  856:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  857:	  x = 0;//No more buying cards
        -:  858:
        -:  859:	  if (DEBUG){
        -:  860:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  861:	  }
        -:  862:
        -:  863:	}
        -:  864:      }     
        -:  865:
        -:  866:      //Reset Hand
    #####:  867:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  868:	state->hand[currentPlayer][i] = temphand[i];
    #####:  869:	temphand[i] = -1;
        -:  870:      }
        -:  871:      //Reset Hand
        -:  872:      			
    #####:  873:      return 0;
        -:  874:			
        -:  875:    case gardens:
    #####:  876:      return -1;
        -:  877:			
        -:  878:    case mine:
    #####:  879:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  880:
    #####:  881:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  882:	{
    #####:  883:	  return -1;
        -:  884:	}
        -:  885:		
    #####:  886:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  887:	{
    #####:  888:	  return -1;
        -:  889:	}
        -:  890:
    #####:  891:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:
    #####:  896:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  897:
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  900:
        -:  901:      //discard trashed card
    #####:  902:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  903:	{
    #####:  904:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  905:	    {
    #####:  906:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  907:	      break;
        -:  908:	    }
        -:  909:	}
        -:  910:			
    #####:  911:      return 0;
        -:  912:			
        -:  913:    case remodel:
    #####:  914:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  915:
    #####:  916:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  917:	{
    #####:  918:	  return -1;
        -:  919:	}
        -:  920:
    #####:  921:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  922:
        -:  923:      //discard card from hand
    #####:  924:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  925:
        -:  926:      //discard trashed card
    #####:  927:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	{
    #####:  929:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  930:	    {
    #####:  931:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  932:	      break;
        -:  933:	    }
        -:  934:	}
        -:  935:
        -:  936:
    #####:  937:      return 0;
        -:  938:		
        -:  939:    case smithy:
     9000:  940:      if (smithy_f(currentPlayer, state, handPos) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     9000:  941:        return 0;
        -:  942:
        -:  943:    /*
        -:  944:      //+3 Cards
        -:  945:      for (i = 0; i < 3; i++)
        -:  946:	    {
        -:  947:	  drawCard(currentPlayer, state);
        -:  948:	    }
        -:  949:			
        -:  950:      //discard card from hand
        -:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:      return 0;
        -:  953:    */
        -:  954:		
        -:  955:    case village:
    #####:  956:        if (village_f(currentPlayer, state, handPos) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:            return 0;
        -:  958:    /*
        -:  959:      //+1 Card
        -:  960:      drawCard(currentPlayer, state);
        -:  961:			
        -:  962:      //+2 Actions
        -:  963:      state->numActions = state->numActions + 2;
        -:  964:			
        -:  965:      //discard played card from hand
        -:  966:      discardCard(handPos, currentPlayer, state, 0);
        -:  967:      return 0;*/
        -:  968:		
        -:  969:    case baron:
    #####:  970:      state->numBuys++;//Increase buys by 1!
    #####:  971:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  972:	int p = 0;//Iterator for hand!
    #####:  973:	int card_not_discarded = 1;//Flag for discard set!
    #####:  974:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  975:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  976:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  977:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  978:	    state->discardCount[currentPlayer]++;
    #####:  979:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  980:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  981:	    }
    #####:  982:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  983:	    state->handCount[currentPlayer]--;
    #####:  984:	    card_not_discarded = 0;//Exit the loop
        -:  985:	  }
    #####:  986:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  987:	    if(DEBUG) {
        -:  988:	      printf("No estate cards in your hand, invalid choice\n");
        -:  989:	      printf("Must gain an estate if there are any\n");
        -:  990:	    }
    #####:  991:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  992:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  993:	      state->supplyCount[estate]--;//Decrement estates
    #####:  994:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  995:		isGameOver(state);
call    0 never executed
        -:  996:	      }
        -:  997:	    }
    #####:  998:	    card_not_discarded = 0;//Exit the loop
        -:  999:	  }
        -: 1000:			    
        -: 1001:	  else{
    #####: 1002:	    p++;//Next card
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:			    
        -: 1007:      else{
    #####: 1008:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1009:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1010:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1011:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1012:	    isGameOver(state);
call    0 never executed
        -: 1013:	  }
        -: 1014:	}
        -: 1015:      }
        -: 1016:	    
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case great_hall:
    #####: 1020:        if(great_hall_f(currentPlayer, state, handPos) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1021:            return 0;
        -: 1022:    /*
        -: 1023:      //+1 Card
        -: 1024:      drawCard(currentPlayer, state);
        -: 1025:			
        -: 1026:      //+1 Actions
        -: 1027:      state->numActions++;
        -: 1028:			
        -: 1029:      //discard card from hand
        -: 1030:      discardCard(handPos, currentPlayer, state, 0);
        -: 1031:      return 0;*/
        -: 1032:		
        -: 1033:    case minion:
        -: 1034:      //+1 action
    #####: 1035:      state->numActions++;
        -: 1036:			
        -: 1037:      //discard card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1039:			
    #####: 1040:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  state->coins = state->coins + 2;
        -: 1043:	}
        -: 1044:			
    #####: 1045:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1046:	{
        -: 1047:	  //discard hand
    #####: 1048:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1049:	    {
    #####: 1050:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1051:	    }
        -: 1052:				
        -: 1053:	  //draw 4
    #####: 1054:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1055:	    {
    #####: 1056:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1057:	    }
        -: 1058:				
        -: 1059:	  //other players discard hand and redraw if hand size > 4
    #####: 1060:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
        -: 1066:		      //discard hand
    #####: 1067:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1068:			{
    #####: 1069:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1070:			}
        -: 1071:							
        -: 1072:		      //draw 4
    #####: 1073:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
    #####: 1075:			  drawCard(i, state);
call    0 never executed
        -: 1076:			}
        -: 1077:		    }
        -: 1078:		}
        -: 1079:	    }
        -: 1080:				
        -: 1081:	}
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case steward:
    #####: 1085:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
        -: 1087:	  //+2 cards
    #####: 1088:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1089:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1090:	}
    #####: 1091:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
        -: 1093:	  //+2 coins
    #####: 1094:	  state->coins = state->coins + 2;
        -: 1095:	}
        -: 1096:      else
        -: 1097:	{
        -: 1098:	  //trash 2 cards in hand
    #####: 1099:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1100:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1101:	}
        -: 1102:			
        -: 1103:      //discard card from hand
    #####: 1104:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case tribute:
    #####: 1108:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1109:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1110:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1111:	  state->deckCount[nextPlayer]--;
        -: 1112:	}
    #####: 1113:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1114:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1115:	  state->discardCount[nextPlayer]--;
        -: 1116:	}
        -: 1117:	else{
        -: 1118:	  //No Card to Reveal
        -: 1119:	  if (DEBUG){
        -: 1120:	    printf("No cards to reveal\n");
        -: 1121:	  }
        -: 1122:	}
        -: 1123:      }
        -: 1124:	    
        -: 1125:      else{
    #####: 1126:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1128:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1129:	    state->deckCount[nextPlayer]++;
    #####: 1130:	    state->discard[nextPlayer][i] = -1;
    #####: 1131:	    state->discardCount[nextPlayer]--;
        -: 1132:	  }
        -: 1133:			    
    #####: 1134:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1135:	} 
    #####: 1136:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1137:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1138:	state->deckCount[nextPlayer]--;
    #####: 1139:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1140:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1141:	state->deckCount[nextPlayer]--;
        -: 1142:      }    
        -: 1143:		       
    #####: 1144:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1145:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1146:	state->playedCardCount++;
    #####: 1147:	tributeRevealedCards[1] = -1;
        -: 1148:      }
        -: 1149:
    #####: 1150:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1151:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1152:	  state->coins += 2;
        -: 1153:	}
        -: 1154:		    
    #####: 1155:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1156:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1157:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1158:	}
        -: 1159:	else{//Action Card
    #####: 1160:	  state->numActions = state->numActions + 2;
        -: 1161:	}
        -: 1162:      }
        -: 1163:	    
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case ambassador:
    #####: 1167:      j = 0;		//used to check if player has enough cards to discard
        -: 1168:
    #####: 1169:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;				
        -: 1172:	}
        -: 1173:
    #####: 1174:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1175:	{
    #####: 1176:	  return -1;
        -: 1177:	}
        -: 1178:
    #####: 1179:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1182:	    {
    #####: 1183:	      j++;
        -: 1184:	    }
        -: 1185:	}
    #####: 1186:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;				
        -: 1189:	}
        -: 1190:
        -: 1191:      if (DEBUG) 
        -: 1192:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1193:
        -: 1194:      //increase supply count for choosen card by amount being discarded
    #####: 1195:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1196:			
        -: 1197:      //each other player gains a copy of revealed card
    #####: 1198:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1199:	{
    #####: 1200:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1201:	    {
    #####: 1202:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1203:	    }
        -: 1204:	}
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1208:
        -: 1209:      //trash copies of cards returned to supply
    #####: 1210:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1211:	{
    #####: 1212:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	    {
    #####: 1214:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1215:		{
    #####: 1216:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1217:		  break;
        -: 1218:		}
        -: 1219:	    }
        -: 1220:	}			
        -: 1221:
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case cutpurse:
        -: 1225:
    #####: 1226:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1227:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:	{
    #####: 1229:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1230:	    {
    #####: 1231:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1232:		{
    #####: 1233:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1234:		    {
    #####: 1235:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1236:		      break;
        -: 1237:		    }
    #####: 1238:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1239:		    {
    #####: 1240:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1241:			{
        -: 1242:			  if (DEBUG)
        -: 1243:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1244:			}	
    #####: 1245:		      break;
        -: 1246:		    }		
        -: 1247:		}
        -: 1248:					
        -: 1249:	    }
        -: 1250:				
        -: 1251:	}				
        -: 1252:
        -: 1253:      //discard played card from hand
    #####: 1254:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1255:
    #####: 1256:      return 0;
        -: 1257:
        -: 1258:		
        -: 1259:    case embargo: 
        -: 1260:      //+2 Coins
    #####: 1261:      state->coins = state->coins + 2;
        -: 1262:			
        -: 1263:      //see if selected pile is in play
    #####: 1264:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1265:	{
    #####: 1266:	  return -1;
        -: 1267:	}
        -: 1268:			
        -: 1269:      //add embargo token to selected supply pile
    #####: 1270:      state->embargoTokens[choice1]++;
        -: 1271:			
        -: 1272:      //trash card
    #####: 1273:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1274:      return 0;
        -: 1275:		
        -: 1276:    case outpost:
        -: 1277:      //set outpost flag
    #####: 1278:      state->outpostPlayed++;
        -: 1279:			
        -: 1280:      //discard card
    #####: 1281:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1282:      return 0;
        -: 1283:		
        -: 1284:    case salvager:
        -: 1285:      //+1 buy
    #####: 1286:      state->numBuys++;
        -: 1287:			
    #####: 1288:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1289:	{
        -: 1290:	  //gain coins equal to trashed card
    #####: 1291:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1292:	  //trash card
    #####: 1293:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1294:	}
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case sea_hag:
    #####: 1301:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1302:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1303:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1304:	  state->discardCount[i]++;
    #####: 1305:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1306:	}
        -: 1307:      }
    #####: 1308:      return 0;
        -: 1309:		
        -: 1310:    case treasure_map:
        -: 1311:      //search hand for another treasure_map
    #####: 1312:      index = -1;
    #####: 1313:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1314:	{
    #####: 1315:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1316:	    {
    #####: 1317:	      index = i;
    #####: 1318:	      break;
        -: 1319:	    }
        -: 1320:	}
    #####: 1321:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1322:	{
        -: 1323:	  //trash both treasure cards
    #####: 1324:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1325:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1326:
        -: 1327:	  //gain 4 Gold cards
    #####: 1328:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1329:	    {
    #####: 1330:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1331:	    }
        -: 1332:				
        -: 1333:	  //return success
    #####: 1334:	  return 1;
        -: 1335:	}
        -: 1336:			
        -: 1337:      //no second treasure_map found in hand
    #####: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
    #####: 1341:  return -1;
        -: 1342:}
        -: 1343:
function discardCard called 79000 returned 100% blocks executed 78%
    79000: 1344:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1345:{
        -: 1346:	
        -: 1347:  //if card is not trashed, added to Played pile 
    79000: 1348:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1349:    {
        -: 1350:      //add card to played pile
    79000: 1351:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    79000: 1352:      state->playedCardCount++;
        -: 1353:    }
        -: 1354:	
        -: 1355:  //set played card to -1
    79000: 1356:  state->hand[currentPlayer][handPos] = -1;
        -: 1357:	
        -: 1358:  //remove card from player's hand
    79000: 1359:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1360:    {
        -: 1361:      //reduce number of cards in hand
    #####: 1362:      state->handCount[currentPlayer]--;
        -: 1363:    }
    79000: 1364:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1365:    {
        -: 1366:      //reduce number of cards in hand
    #####: 1367:      state->handCount[currentPlayer]--;
        -: 1368:    }
        -: 1369:  else 	
        -: 1370:    {
        -: 1371:      //replace discarded card with last card in hand
    79000: 1372:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1373:      //set last card to -1
    79000: 1374:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1375:      //reduce number of cards in hand
    79000: 1376:      state->handCount[currentPlayer]--;
        -: 1377:    }
        -: 1378:	
    79000: 1379:  return 0;
        -: 1380:}
        -: 1381:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1382:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1383:{
        -: 1384:  //Note: supplyPos is enum of choosen card
        -: 1385:	
        -: 1386:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1387:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1388:    {
    #####: 1389:      return -1;
        -: 1390:    }
        -: 1391:	
        -: 1392:  //added card for [whoseTurn] current player:
        -: 1393:  // toFlag = 0 : add to discard
        -: 1394:  // toFlag = 1 : add to deck
        -: 1395:  // toFlag = 2 : add to hand
        -: 1396:
    #####: 1397:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1398:    {
    #####: 1399:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1400:      state->deckCount[player]++;
        -: 1401:    }
    #####: 1402:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1403:    {
    #####: 1404:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1405:      state->handCount[player]++;
        -: 1406:    }
        -: 1407:  else
        -: 1408:    {
    #####: 1409:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1410:      state->discardCount[player]++;
        -: 1411:    }
        -: 1412:	
        -: 1413:  //decrease number in supply pile
    #####: 1414:  state->supplyCount[supplyPos]--;
        -: 1415:	 
    #####: 1416:  return 0;
        -: 1417:}
        -: 1418:
function updateCoins called 136524 returned 100% blocks executed 91%
   136524: 1419:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1420:{
        -: 1421:  int i;
        -: 1422:	
        -: 1423:  //reset coin count
   136524: 1424:  state->coins = 0;
        -: 1425:
        -: 1426:  //add coins for each Treasure card in player's hand
   719155: 1427:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -: 1428:    {
   582631: 1429:      if (state->hand[player][i] == copper)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -: 1430:	{
   204103: 1431:	  state->coins += 1;
        -: 1432:	}
   378528: 1433:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1434:	{
    #####: 1435:	  state->coins += 2;
        -: 1436:	}
   378528: 1437:      else if (state->hand[player][i] == gold)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1438:	{
    44163: 1439:	  state->coins += 3;
        -: 1440:	}	
        -: 1441:    }	
        -: 1442:
        -: 1443:  //add bonus
   136524: 1444:  state->coins += bonus;
        -: 1445:
   136524: 1446:  return 0;
        -: 1447:}
        -: 1448:
        -: 1449:
        -: 1450://end of dominion.c
        -: 1451:
