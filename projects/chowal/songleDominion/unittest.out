----------------- Testing function: playCard ----------------
TEST 1: Phase is correct
test game = 0, game = 0,  expected = 0
PASS
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 2: Enough Actions?
actions = 1, expected = 1
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 3: Correct card is in hand
card = 1, expected = 13
TEST FAILED
~~~~~~~~~~~~~~~~~~~~
TEST 4: Test Actions after played
actions = 2, expected = 0
TEST FAILED
~~~~~~~~~~~~~~~~~~~~
TEST 5: Smithy card played
card in pos: 1, expected: 13
TEST FAILED
~~~~~~~~~~~~~~~~~~~~
TEST 6: no errors during playcard
Errors 0, expected = 0
PASS
~~~~~~~~~~~~~~~~~~~~

 >>>>> Testing complete playCard <<<<<

 >>>>> Pass: 4 | Fail: 3 <<<<<

File 'dominion.c'
Lines executed:29.91% of 565
Branches executed:30.60% of 415
Taken at least once:19.76% of 415
Calls executed:27.96% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 150 returned 100% blocks executed 83%
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
        6:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       47:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 10 returned 100% blocks executed 94%
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      350:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      250:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 1 returned 100% blocks executed 73%
        1:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        1:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        1:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        1:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        1:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        1:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        1:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 7 returned 100% blocks executed 100%
        7:  311:int numHandCards(struct gameState *state) {
        7:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 9 returned 100% blocks executed 100%
        9:  315:int handCard(int handPos, struct gameState *state) {
        9:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2 returned 100% blocks executed 100%
        2:  320:int supplyCount(int card, struct gameState *state) {
        2:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 23 returned 100% blocks executed 100%
       23:  346:int whoseTurn(struct gameState *state) {
       23:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  429:      //if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  440:      //if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 47 returned 100% blocks executed 38%
       47:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       47:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       47:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       47:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       47:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       47:  576:    state->deckCount[player]--;
       47:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       47:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 7 returned 100% blocks executed 11%
        7:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        7:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        7:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        7:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        7:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:
        -:  662:  //uses switch to select card and perform actions
        7:  663:  switch( card ) 
branch  0 taken 43%
branch  1 taken 14%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 29%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 14%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  664:    {
        -:  665:    case adventurer:
        3:  666:      playAdventurer(state, currentPlayer, temphand);
call    0 returned 100%
        3:  667:      return 0;
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
        5:  671:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  672:	{
        4:  673:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
        1:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
        3:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  681:	{
        2:  682:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  683:	    {
        1:  684:	      drawCard(i, state);
call    0 returned 100%
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
        1:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  690:			
        1:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      playGardens();
call    0 never executed
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      playRemodel(state, currentPlayer, handPos, choice1, choice2);
call    0 never executed
    #####:  786:      return 0;
        -:  787:		
        -:  788:    case smithy:
        2:  789:      playSmithy(state, currentPlayer, handPos);
call    0 returned 100%
        -:  790:		
        -:  791:    case village:
        -:  792:      //+1 Card
        2:  793:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  794:			
        -:  795:      //+2 Actions
        2:  796:      state->numActions = state->numActions + 2;
        -:  797:			
        -:  798:      //discard played card from hand
        2:  799:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  800:      return 0;
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
        1:  855:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  856:			
        -:  857:      //+1 Actions
        1:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
        1:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:		playSea_hag(state, currentPlayer);
call    0 never executed
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case treasure_map:
        -: 1136:      //search hand for another treasure_map
    #####: 1137:      index = -1;
    #####: 1138:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1141:	    {
    #####: 1142:	      index = i;
    #####: 1143:	      break;
        -: 1144:	    }
        -: 1145:	}
    #####: 1146:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
        -: 1148:	  //trash both treasure cards
    #####: 1149:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1150:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1151:
        -: 1152:	  //gain 4 Gold cards
    #####: 1153:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1156:	    }
        -: 1157:				
        -: 1158:	  //return success
    #####: 1159:	  return 1;
        -: 1160:	}
        -: 1161:			
        -: 1162:      //no second treasure_map found in hand
    #####: 1163:      return -1;
        -: 1164:    }
        -: 1165:	
    #####: 1166:  return -1;
        -: 1167:}
        -: 1168:
function discardCard called 6 returned 100% blocks executed 78%
        6: 1169:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1170:{
        -: 1171:	
        -: 1172:  //if card is not trashed, added to Played pile 
        6: 1173:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1174:    {
        -: 1175:      //add card to played pile
        6: 1176:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1177:      state->playedCardCount++;
        -: 1178:    }
        -: 1179:	
        -: 1180:  //set played card to -1
        6: 1181:  state->hand[currentPlayer][handPos] = -1;
        -: 1182:	
        -: 1183:  //remove card from player's hand
        6: 1184:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
    #####: 1187:      state->handCount[currentPlayer]--;
        -: 1188:    }
        6: 1189:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1190:    {
        -: 1191:      //reduce number of cards in hand
    #####: 1192:      state->handCount[currentPlayer]--;
        -: 1193:    }
        -: 1194:  else 	
        -: 1195:    {
        -: 1196:      //replace discarded card with last card in hand
        6: 1197:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1198:      //set last card to -1
        6: 1199:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1200:      //reduce number of cards in hand
        6: 1201:      state->handCount[currentPlayer]--;
        -: 1202:    }
        -: 1203:	
        6: 1204:  return 0;
        -: 1205:}
        -: 1206:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1207:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1208:{
        -: 1209:  //Note: supplyPos is enum of choosen card
        -: 1210:	
        -: 1211:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1212:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1213:    {
    #####: 1214:      return -1;
        -: 1215:    }
        -: 1216:	
        -: 1217:  //added card for [whoseTurn] current player:
        -: 1218:  // toFlag = 0 : add to discard
        -: 1219:  // toFlag = 1 : add to deck
        -: 1220:  // toFlag = 2 : add to hand
        -: 1221:
        2: 1222:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1223:    {
    #####: 1224:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1225:      state->deckCount[player]++;
        -: 1226:    }
        2: 1227:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1228:    {
        2: 1229:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1230:      state->handCount[player]++;
        -: 1231:    }
        -: 1232:  else
        -: 1233:    {
    #####: 1234:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1235:      state->discardCount[player]++;
        -: 1236:    }
        -: 1237:	
        -: 1238:  //decrease number in supply pile
        2: 1239:  state->supplyCount[supplyPos]--;
        -: 1240:	 
        2: 1241:  return 0;
        -: 1242:}
        -: 1243:
function updateCoins called 6 returned 100% blocks executed 82%
        6: 1244:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1245:{
        -: 1246:  int i;
        -: 1247:	
        -: 1248:  //reset coin count
        6: 1249:  state->coins = 0;
        -: 1250:
        -: 1251:  //add coins for each Treasure card in player's hand
       40: 1252:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 1253:    {
       34: 1254:      if (state->hand[player][i] == copper)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 1255:	{
       27: 1256:	  state->coins += 1;
        -: 1257:	}
        7: 1258:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1259:	{
    #####: 1260:	  state->coins += 2;
        -: 1261:	}
        7: 1262:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1263:	{
    #####: 1264:	  state->coins += 3;
        -: 1265:	}	
        -: 1266:    }	
        -: 1267:
        -: 1268:  //add bonus
        6: 1269:  state->coins += bonus;
        -: 1270:
        6: 1271:  return 0;
        -: 1272:}
        -: 1273:
        -: 1274:
function playAdventurer called 3 returned 100% blocks executed 64%
        3: 1275:void playAdventurer(struct gameState *state, int currentPlayer, int *temphand){
        3: 1276:	int drawntreasure=0;
        -: 1277:	int cardDrawn;
        3: 1278:	int z = 0;// this is the counter for the temp hand
        -: 1279:
       12: 1280:	while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6: 1281:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1282:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1283:		}
        6: 1284:		drawCard(currentPlayer, state);
call    0 returned 100%
        6: 1285:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6: 1286:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        6: 1287:			drawntreasure++;
        -: 1288:        }
        -: 1289:		else{
    #####: 1290:			temphand[z]=cardDrawn;
    #####: 1291:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1292:		}
        -: 1293:    }
        6: 1294:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1295:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1296:	    z=z-1;
        -: 1297:	}
        3: 1298:}
        -: 1299:
        -: 1300:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1301:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1302:	//+3 Cards
        2: 1303:	int i = 0;
       10: 1304:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1305:	{
        8: 1306:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1307:	}
        -: 1308:		
        -: 1309:	//discard card from hand
        2: 1310:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1311:}
        -: 1312:
        -: 1313:
function playGardens called 0 returned 0% blocks executed 0%
    #####: 1314:int playGardens(){
    #####: 1315:	return -1;
        -: 1316:}
        -: 1317:
        -: 1318:
function playSea_hag called 0 returned 0% blocks executed 0%
    #####: 1319:void playSea_hag(struct gameState *state, int currentPlayer){
        -: 1320:	int i;
    #####: 1321:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1322:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1323:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1324:			state->deckCount[i]--;
    #####: 1325:			state->discardCount[i]++;
    #####: 1326:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1327:		}
    #####: 1328:		else if (i == currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1329:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1330:			state->deckCount[i]--;
    #####: 1331:			state->discardCount[i]++;
        -: 1332:		}
        -: 1333:	}
    #####: 1334:}
        -: 1335:
        -: 1336:
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1337:int playRemodel(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
    #####: 1338:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1341:	{
    #####: 1342:	  return -1;
        -: 1343:	}
        -: 1344:
    #####: 1345:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1346:
        -: 1347:      //discard card from hand
    #####: 1348:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1349:
        -: 1350:      //discard trashed card
    #####: 1351:	  int i = 0;
    #####: 1352:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1353:	{
    #####: 1354:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1355:	    {
    #####: 1356:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1357:	      break;
        -: 1358:	    }
        -: 1359:	}
        -: 1360:	
    #####: 1361:	return 0;
        -: 1362:}
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing function: updateCoins ----------------
TEST 1: Copper coins
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 2: Silver coins
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 3: Gold coins
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 4: Test adding a bonus
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 5: Test max bonus
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 6: Test min bonus
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 7: Mixed amount of coins
PASS
~~~~~~~~~~~~~~~~~~~~

 >>>>> Testing complete updateCoins <<<<<

 >>>>> Pass: 7 | Fail: 0 <<<<<

File 'dominion.c'
Lines executed:30.27% of 565
Branches executed:30.60% of 415
Taken at least once:20.24% of 415
Calls executed:27.96% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 180 returned 100% blocks executed 83%
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 88%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
call    0 returned 100%
        6:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
        8:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       56:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       30:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 12 returned 100% blocks executed 94%
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      420:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      300:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 1 returned 100% blocks executed 73%
        1:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        1:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        1:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        1:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        1:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        1:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        1:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 7 returned 100% blocks executed 100%
        7:  311:int numHandCards(struct gameState *state) {
        7:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 9 returned 100% blocks executed 100%
        9:  315:int handCard(int handPos, struct gameState *state) {
        9:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2 returned 100% blocks executed 100%
        2:  320:int supplyCount(int card, struct gameState *state) {
        2:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 23 returned 100% blocks executed 100%
       23:  346:int whoseTurn(struct gameState *state) {
       23:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  429:      //if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  440:      //if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 52 returned 100% blocks executed 38%
       52:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       52:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       52:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       52:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       52:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       52:  576:    state->deckCount[player]--;
       52:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       52:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 7 returned 100% blocks executed 11%
        7:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        7:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        7:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        7:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        7:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:
        -:  662:  //uses switch to select card and perform actions
        7:  663:  switch( card ) 
branch  0 taken 43%
branch  1 taken 14%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 29%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 14%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  664:    {
        -:  665:    case adventurer:
        3:  666:      playAdventurer(state, currentPlayer, temphand);
call    0 returned 100%
        3:  667:      return 0;
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
        5:  671:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  672:	{
        4:  673:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
        1:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
        3:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  681:	{
        2:  682:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  683:	    {
        1:  684:	      drawCard(i, state);
call    0 returned 100%
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
        1:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  690:			
        1:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      playGardens();
call    0 never executed
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      playRemodel(state, currentPlayer, handPos, choice1, choice2);
call    0 never executed
    #####:  786:      return 0;
        -:  787:		
        -:  788:    case smithy:
        2:  789:      playSmithy(state, currentPlayer, handPos);
call    0 returned 100%
        -:  790:		
        -:  791:    case village:
        -:  792:      //+1 Card
        2:  793:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  794:			
        -:  795:      //+2 Actions
        2:  796:      state->numActions = state->numActions + 2;
        -:  797:			
        -:  798:      //discard played card from hand
        2:  799:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  800:      return 0;
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
        1:  855:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  856:			
        -:  857:      //+1 Actions
        1:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
        1:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:		playSea_hag(state, currentPlayer);
call    0 never executed
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case treasure_map:
        -: 1136:      //search hand for another treasure_map
    #####: 1137:      index = -1;
    #####: 1138:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1141:	    {
    #####: 1142:	      index = i;
    #####: 1143:	      break;
        -: 1144:	    }
        -: 1145:	}
    #####: 1146:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
        -: 1148:	  //trash both treasure cards
    #####: 1149:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1150:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1151:
        -: 1152:	  //gain 4 Gold cards
    #####: 1153:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1156:	    }
        -: 1157:				
        -: 1158:	  //return success
    #####: 1159:	  return 1;
        -: 1160:	}
        -: 1161:			
        -: 1162:      //no second treasure_map found in hand
    #####: 1163:      return -1;
        -: 1164:    }
        -: 1165:	
    #####: 1166:  return -1;
        -: 1167:}
        -: 1168:
function discardCard called 6 returned 100% blocks executed 78%
        6: 1169:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1170:{
        -: 1171:	
        -: 1172:  //if card is not trashed, added to Played pile 
        6: 1173:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1174:    {
        -: 1175:      //add card to played pile
        6: 1176:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1177:      state->playedCardCount++;
        -: 1178:    }
        -: 1179:	
        -: 1180:  //set played card to -1
        6: 1181:  state->hand[currentPlayer][handPos] = -1;
        -: 1182:	
        -: 1183:  //remove card from player's hand
        6: 1184:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
    #####: 1187:      state->handCount[currentPlayer]--;
        -: 1188:    }
        6: 1189:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1190:    {
        -: 1191:      //reduce number of cards in hand
    #####: 1192:      state->handCount[currentPlayer]--;
        -: 1193:    }
        -: 1194:  else 	
        -: 1195:    {
        -: 1196:      //replace discarded card with last card in hand
        6: 1197:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1198:      //set last card to -1
        6: 1199:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1200:      //reduce number of cards in hand
        6: 1201:      state->handCount[currentPlayer]--;
        -: 1202:    }
        -: 1203:	
        6: 1204:  return 0;
        -: 1205:}
        -: 1206:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1207:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1208:{
        -: 1209:  //Note: supplyPos is enum of choosen card
        -: 1210:	
        -: 1211:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1212:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1213:    {
    #####: 1214:      return -1;
        -: 1215:    }
        -: 1216:	
        -: 1217:  //added card for [whoseTurn] current player:
        -: 1218:  // toFlag = 0 : add to discard
        -: 1219:  // toFlag = 1 : add to deck
        -: 1220:  // toFlag = 2 : add to hand
        -: 1221:
        2: 1222:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1223:    {
    #####: 1224:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1225:      state->deckCount[player]++;
        -: 1226:    }
        2: 1227:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1228:    {
        2: 1229:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1230:      state->handCount[player]++;
        -: 1231:    }
        -: 1232:  else
        -: 1233:    {
    #####: 1234:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1235:      state->discardCount[player]++;
        -: 1236:    }
        -: 1237:	
        -: 1238:  //decrease number in supply pile
        2: 1239:  state->supplyCount[supplyPos]--;
        -: 1240:	 
        2: 1241:  return 0;
        -: 1242:}
        -: 1243:
function updateCoins called 14 returned 100% blocks executed 100%
       14: 1244:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1245:{
        -: 1246:  int i;
        -: 1247:	
        -: 1248:  //reset coin count
       14: 1249:  state->coins = 0;
        -: 1250:
        -: 1251:  //add coins for each Treasure card in player's hand
       88: 1252:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1253:    {
       74: 1254:      if (state->hand[player][i] == copper)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1255:	{
       56: 1256:	  state->coins += 1;
        -: 1257:	}
       18: 1258:      else if (state->hand[player][i] == silver)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -: 1259:	{
        5: 1260:	  state->coins += 2;
        -: 1261:	}
       13: 1262:      else if (state->hand[player][i] == gold)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        -: 1263:	{
        5: 1264:	  state->coins += 3;
        -: 1265:	}	
        -: 1266:    }	
        -: 1267:
        -: 1268:  //add bonus
       14: 1269:  state->coins += bonus;
        -: 1270:
       14: 1271:  return 0;
        -: 1272:}
        -: 1273:
        -: 1274:
function playAdventurer called 3 returned 100% blocks executed 64%
        3: 1275:void playAdventurer(struct gameState *state, int currentPlayer, int *temphand){
        3: 1276:	int drawntreasure=0;
        -: 1277:	int cardDrawn;
        3: 1278:	int z = 0;// this is the counter for the temp hand
        -: 1279:
       12: 1280:	while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6: 1281:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1282:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1283:		}
        6: 1284:		drawCard(currentPlayer, state);
call    0 returned 100%
        6: 1285:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6: 1286:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        6: 1287:			drawntreasure++;
        -: 1288:        }
        -: 1289:		else{
    #####: 1290:			temphand[z]=cardDrawn;
    #####: 1291:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1292:		}
        -: 1293:    }
        6: 1294:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1295:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1296:	    z=z-1;
        -: 1297:	}
        3: 1298:}
        -: 1299:
        -: 1300:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1301:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1302:	//+3 Cards
        2: 1303:	int i = 0;
       10: 1304:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1305:	{
        8: 1306:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1307:	}
        -: 1308:		
        -: 1309:	//discard card from hand
        2: 1310:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1311:}
        -: 1312:
        -: 1313:
function playGardens called 0 returned 0% blocks executed 0%
    #####: 1314:int playGardens(){
    #####: 1315:	return -1;
        -: 1316:}
        -: 1317:
        -: 1318:
function playSea_hag called 0 returned 0% blocks executed 0%
    #####: 1319:void playSea_hag(struct gameState *state, int currentPlayer){
        -: 1320:	int i;
    #####: 1321:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1322:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1323:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1324:			state->deckCount[i]--;
    #####: 1325:			state->discardCount[i]++;
    #####: 1326:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1327:		}
    #####: 1328:		else if (i == currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1329:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1330:			state->deckCount[i]--;
    #####: 1331:			state->discardCount[i]++;
        -: 1332:		}
        -: 1333:	}
    #####: 1334:}
        -: 1335:
        -: 1336:
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1337:int playRemodel(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
    #####: 1338:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1341:	{
    #####: 1342:	  return -1;
        -: 1343:	}
        -: 1344:
    #####: 1345:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1346:
        -: 1347:      //discard card from hand
    #####: 1348:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1349:
        -: 1350:      //discard trashed card
    #####: 1351:	  int i = 0;
    #####: 1352:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1353:	{
    #####: 1354:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1355:	    {
    #####: 1356:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1357:	      break;
        -: 1358:	    }
        -: 1359:	}
        -: 1360:	
    #####: 1361:	return 0;
        -: 1362:}
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing function: isGameOver ----------------
TEST 1: Province card desk check
province cards = 8
Supply count reduced
province cards = 0
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 2: Check 3 supply piles, Game ends
coppers = 46, silvers = 40, golds = 30
Supply count reduced
coppers = 0, silvers = 0, golds = 0
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 3: Check 2 piles, Game does NOT end
coppers = 46, silvers = 40
Supply count reduced
coppers = 0, silvers = 0
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 4: Check 4 piles, Game ends
coppers = 46, silvers = 40, golds = 30, adventurer = 10
Supply count reduced
coppers = 0, silvers = 0, golds = 0, adventurer = 0
PASS
~~~~~~~~~~~~~~~~~~~~

 >>>>> Testing complete isGameOver <<<<<

 >>>>> Pass: 4 | Fail: 0 <<<<<

File 'dominion.c'
Lines executed:32.04% of 565
Branches executed:32.53% of 415
Taken at least once:22.17% of 415
Calls executed:27.96% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 210 returned 100% blocks executed 83%
      210:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       56:   12:    return -1;
      154:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 88%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
call    0 returned 100%
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
       10:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       65:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       21:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       21:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 14 returned 100% blocks executed 94%
       14:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      168:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      490:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      350:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      154:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       14:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 1 returned 100% blocks executed 73%
        1:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        1:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        1:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        1:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        1:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        1:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        1:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 7 returned 100% blocks executed 100%
        7:  311:int numHandCards(struct gameState *state) {
        7:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 9 returned 100% blocks executed 100%
        9:  315:int handCard(int handPos, struct gameState *state) {
        9:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2 returned 100% blocks executed 100%
        2:  320:int supplyCount(int card, struct gameState *state) {
        2:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 23 returned 100% blocks executed 100%
       23:  346:int whoseTurn(struct gameState *state) {
       23:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        4:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        3:  401:  j = 0;
       78:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       75:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  405:	{
        9:  406:	  j++;
        -:  407:	}
        -:  408:    }
        3:  409:  if ( j >= 3)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  429:      //if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  440:      //if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 57 returned 100% blocks executed 38%
       57:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       57:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       57:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       57:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       57:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       57:  576:    state->deckCount[player]--;
       57:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       57:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 7 returned 100% blocks executed 11%
        7:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        7:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        7:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        7:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        7:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:
        -:  662:  //uses switch to select card and perform actions
        7:  663:  switch( card ) 
branch  0 taken 43%
branch  1 taken 14%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 29%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 14%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  664:    {
        -:  665:    case adventurer:
        3:  666:      playAdventurer(state, currentPlayer, temphand);
call    0 returned 100%
        3:  667:      return 0;
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
        5:  671:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  672:	{
        4:  673:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
        1:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
        3:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  681:	{
        2:  682:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  683:	    {
        1:  684:	      drawCard(i, state);
call    0 returned 100%
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
        1:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  690:			
        1:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      playGardens();
call    0 never executed
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      playRemodel(state, currentPlayer, handPos, choice1, choice2);
call    0 never executed
    #####:  786:      return 0;
        -:  787:		
        -:  788:    case smithy:
        2:  789:      playSmithy(state, currentPlayer, handPos);
call    0 returned 100%
        -:  790:		
        -:  791:    case village:
        -:  792:      //+1 Card
        2:  793:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  794:			
        -:  795:      //+2 Actions
        2:  796:      state->numActions = state->numActions + 2;
        -:  797:			
        -:  798:      //discard played card from hand
        2:  799:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  800:      return 0;
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
        1:  855:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  856:			
        -:  857:      //+1 Actions
        1:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
        1:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:		playSea_hag(state, currentPlayer);
call    0 never executed
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case treasure_map:
        -: 1136:      //search hand for another treasure_map
    #####: 1137:      index = -1;
    #####: 1138:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1141:	    {
    #####: 1142:	      index = i;
    #####: 1143:	      break;
        -: 1144:	    }
        -: 1145:	}
    #####: 1146:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
        -: 1148:	  //trash both treasure cards
    #####: 1149:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1150:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1151:
        -: 1152:	  //gain 4 Gold cards
    #####: 1153:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1156:	    }
        -: 1157:				
        -: 1158:	  //return success
    #####: 1159:	  return 1;
        -: 1160:	}
        -: 1161:			
        -: 1162:      //no second treasure_map found in hand
    #####: 1163:      return -1;
        -: 1164:    }
        -: 1165:	
    #####: 1166:  return -1;
        -: 1167:}
        -: 1168:
function discardCard called 6 returned 100% blocks executed 78%
        6: 1169:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1170:{
        -: 1171:	
        -: 1172:  //if card is not trashed, added to Played pile 
        6: 1173:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1174:    {
        -: 1175:      //add card to played pile
        6: 1176:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1177:      state->playedCardCount++;
        -: 1178:    }
        -: 1179:	
        -: 1180:  //set played card to -1
        6: 1181:  state->hand[currentPlayer][handPos] = -1;
        -: 1182:	
        -: 1183:  //remove card from player's hand
        6: 1184:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
    #####: 1187:      state->handCount[currentPlayer]--;
        -: 1188:    }
        6: 1189:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1190:    {
        -: 1191:      //reduce number of cards in hand
    #####: 1192:      state->handCount[currentPlayer]--;
        -: 1193:    }
        -: 1194:  else 	
        -: 1195:    {
        -: 1196:      //replace discarded card with last card in hand
        6: 1197:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1198:      //set last card to -1
        6: 1199:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1200:      //reduce number of cards in hand
        6: 1201:      state->handCount[currentPlayer]--;
        -: 1202:    }
        -: 1203:	
        6: 1204:  return 0;
        -: 1205:}
        -: 1206:
function gainCard called 2 returned 100% blocks executed 70%
        2: 1207:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1208:{
        -: 1209:  //Note: supplyPos is enum of choosen card
        -: 1210:	
        -: 1211:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1212:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1213:    {
    #####: 1214:      return -1;
        -: 1215:    }
        -: 1216:	
        -: 1217:  //added card for [whoseTurn] current player:
        -: 1218:  // toFlag = 0 : add to discard
        -: 1219:  // toFlag = 1 : add to deck
        -: 1220:  // toFlag = 2 : add to hand
        -: 1221:
        2: 1222:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1223:    {
    #####: 1224:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1225:      state->deckCount[player]++;
        -: 1226:    }
        2: 1227:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1228:    {
        2: 1229:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1230:      state->handCount[player]++;
        -: 1231:    }
        -: 1232:  else
        -: 1233:    {
    #####: 1234:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1235:      state->discardCount[player]++;
        -: 1236:    }
        -: 1237:	
        -: 1238:  //decrease number in supply pile
        2: 1239:  state->supplyCount[supplyPos]--;
        -: 1240:	 
        2: 1241:  return 0;
        -: 1242:}
        -: 1243:
function updateCoins called 15 returned 100% blocks executed 100%
       15: 1244:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1245:{
        -: 1246:  int i;
        -: 1247:	
        -: 1248:  //reset coin count
       15: 1249:  state->coins = 0;
        -: 1250:
        -: 1251:  //add coins for each Treasure card in player's hand
       94: 1252:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1253:    {
       79: 1254:      if (state->hand[player][i] == copper)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1255:	{
       60: 1256:	  state->coins += 1;
        -: 1257:	}
       19: 1258:      else if (state->hand[player][i] == silver)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
        -: 1259:	{
        5: 1260:	  state->coins += 2;
        -: 1261:	}
       14: 1262:      else if (state->hand[player][i] == gold)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -: 1263:	{
        5: 1264:	  state->coins += 3;
        -: 1265:	}	
        -: 1266:    }	
        -: 1267:
        -: 1268:  //add bonus
       15: 1269:  state->coins += bonus;
        -: 1270:
       15: 1271:  return 0;
        -: 1272:}
        -: 1273:
        -: 1274:
function playAdventurer called 3 returned 100% blocks executed 64%
        3: 1275:void playAdventurer(struct gameState *state, int currentPlayer, int *temphand){
        3: 1276:	int drawntreasure=0;
        -: 1277:	int cardDrawn;
        3: 1278:	int z = 0;// this is the counter for the temp hand
        -: 1279:
       12: 1280:	while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6: 1281:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1282:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1283:		}
        6: 1284:		drawCard(currentPlayer, state);
call    0 returned 100%
        6: 1285:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6: 1286:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        6: 1287:			drawntreasure++;
        -: 1288:        }
        -: 1289:		else{
    #####: 1290:			temphand[z]=cardDrawn;
    #####: 1291:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1292:		}
        -: 1293:    }
        6: 1294:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1295:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1296:	    z=z-1;
        -: 1297:	}
        3: 1298:}
        -: 1299:
        -: 1300:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1301:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1302:	//+3 Cards
        2: 1303:	int i = 0;
       10: 1304:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1305:	{
        8: 1306:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1307:	}
        -: 1308:		
        -: 1309:	//discard card from hand
        2: 1310:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1311:}
        -: 1312:
        -: 1313:
function playGardens called 0 returned 0% blocks executed 0%
    #####: 1314:int playGardens(){
    #####: 1315:	return -1;
        -: 1316:}
        -: 1317:
        -: 1318:
function playSea_hag called 0 returned 0% blocks executed 0%
    #####: 1319:void playSea_hag(struct gameState *state, int currentPlayer){
        -: 1320:	int i;
    #####: 1321:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1322:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1323:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1324:			state->deckCount[i]--;
    #####: 1325:			state->discardCount[i]++;
    #####: 1326:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1327:		}
    #####: 1328:		else if (i == currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1329:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1330:			state->deckCount[i]--;
    #####: 1331:			state->discardCount[i]++;
        -: 1332:		}
        -: 1333:	}
    #####: 1334:}
        -: 1335:
        -: 1336:
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1337:int playRemodel(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
    #####: 1338:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1341:	{
    #####: 1342:	  return -1;
        -: 1343:	}
        -: 1344:
    #####: 1345:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1346:
        -: 1347:      //discard card from hand
    #####: 1348:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1349:
        -: 1350:      //discard trashed card
    #####: 1351:	  int i = 0;
    #####: 1352:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1353:	{
    #####: 1354:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1355:	    {
    #####: 1356:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1357:	      break;
        -: 1358:	    }
        -: 1359:	}
        -: 1360:	
    #####: 1361:	return 0;
        -: 1362:}
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
----------------- Testing function: getWinners ----------------
TEST 1: defaulting all unused players' scores
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 2: function returns 0
PASS
~~~~~~~~~~~~~~~~~~~~
TEST 3: player 2 is the winner
PASS
PASS
~~~~~~~~~~~~~~~~~~~~

 >>>>> Testing complete getWinners <<<<<

 >>>>> Pass: 4 | Fail: 0 <<<<<

File 'dominion.c'
Lines executed:38.23% of 565
Branches executed:41.69% of 415
Taken at least once:29.88% of 415
Calls executed:30.11% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 270 returned 100% blocks executed 83%
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 88%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 100%
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       83:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 18 returned 100% blocks executed 94%
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      630:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      450:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      198:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 1 returned 100% blocks executed 73%
        1:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        1:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        1:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        1:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        1:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        1:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        1:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 7 returned 100% blocks executed 100%
        7:  311:int numHandCards(struct gameState *state) {
        7:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 9 returned 100% blocks executed 100%
        9:  315:int handCard(int handPos, struct gameState *state) {
        9:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 7 returned 100% blocks executed 100%
        7:  320:int supplyCount(int card, struct gameState *state) {
        7:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 26 returned 100% blocks executed 100%
       26:  346:int whoseTurn(struct gameState *state) {
       26:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        4:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        3:  401:  j = 0;
       78:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       75:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  405:	{
        9:  406:	  j++;
        -:  407:	}
        -:  408:    }
        3:  409:  if ( j >= 3)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 6 returned 100% blocks executed 36%
        6:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        6:  420:  int score = 0;
        -:  421:  //score from hand
       29:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -:  423:    {
       23:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       23:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       23:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       23:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
       23:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  429:      //if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        6:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  440:      //if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        6:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
        6:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 3 returned 100% blocks executed 100%
        3:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
       15:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
       12:  467:      if (i >= state->numPlayers)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  468:	{
        6:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
        6:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100%
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
        3:  478:  j = 0;
       15:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  480:    {
       12:  481:      if (players[i] > players[j])
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  482:	{
        3:  483:	  j = i;
        -:  484:	}
        -:  485:    }
        3:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
        3:  489:  currentPlayer = whoseTurn(state);
call    0 returned 100%
       15:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  491:    {
       12:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  493:	{
        3:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
        3:  499:  j = 0;
       15:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  501:    {
       12:  502:      if ( players[i] > players[j] )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  503:	{
        3:  504:	  j = i;
        -:  505:	}
        -:  506:    }
        3:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
       15:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  511:    {
       12:  512:      if ( players[i] == highScore )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  513:	{
        3:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
        9:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
        3:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 67 returned 100% blocks executed 38%
       67:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       67:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       67:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       67:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       67:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       67:  576:    state->deckCount[player]--;
       67:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       67:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 7 returned 100% blocks executed 11%
        7:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        7:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        7:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        7:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        7:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:
        -:  662:  //uses switch to select card and perform actions
        7:  663:  switch( card ) 
branch  0 taken 43%
branch  1 taken 14%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 29%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 14%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  664:    {
        -:  665:    case adventurer:
        3:  666:      playAdventurer(state, currentPlayer, temphand);
call    0 returned 100%
        3:  667:      return 0;
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
        5:  671:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  672:	{
        4:  673:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
        1:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
        3:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  681:	{
        2:  682:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  683:	    {
        1:  684:	      drawCard(i, state);
call    0 returned 100%
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
        1:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  690:			
        1:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      playGardens();
call    0 never executed
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      playRemodel(state, currentPlayer, handPos, choice1, choice2);
call    0 never executed
    #####:  786:      return 0;
        -:  787:		
        -:  788:    case smithy:
        2:  789:      playSmithy(state, currentPlayer, handPos);
call    0 returned 100%
        -:  790:		
        -:  791:    case village:
        -:  792:      //+1 Card
        2:  793:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  794:			
        -:  795:      //+2 Actions
        2:  796:      state->numActions = state->numActions + 2;
        -:  797:			
        -:  798:      //discard played card from hand
        2:  799:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  800:      return 0;
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
        1:  855:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  856:			
        -:  857:      //+1 Actions
        1:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
        1:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:		playSea_hag(state, currentPlayer);
call    0 never executed
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case treasure_map:
        -: 1136:      //search hand for another treasure_map
    #####: 1137:      index = -1;
    #####: 1138:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1141:	    {
    #####: 1142:	      index = i;
    #####: 1143:	      break;
        -: 1144:	    }
        -: 1145:	}
    #####: 1146:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
        -: 1148:	  //trash both treasure cards
    #####: 1149:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1150:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1151:
        -: 1152:	  //gain 4 Gold cards
    #####: 1153:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1156:	    }
        -: 1157:				
        -: 1158:	  //return success
    #####: 1159:	  return 1;
        -: 1160:	}
        -: 1161:			
        -: 1162:      //no second treasure_map found in hand
    #####: 1163:      return -1;
        -: 1164:    }
        -: 1165:	
    #####: 1166:  return -1;
        -: 1167:}
        -: 1168:
function discardCard called 6 returned 100% blocks executed 78%
        6: 1169:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1170:{
        -: 1171:	
        -: 1172:  //if card is not trashed, added to Played pile 
        6: 1173:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1174:    {
        -: 1175:      //add card to played pile
        6: 1176:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1177:      state->playedCardCount++;
        -: 1178:    }
        -: 1179:	
        -: 1180:  //set played card to -1
        6: 1181:  state->hand[currentPlayer][handPos] = -1;
        -: 1182:	
        -: 1183:  //remove card from player's hand
        6: 1184:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
    #####: 1187:      state->handCount[currentPlayer]--;
        -: 1188:    }
        6: 1189:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1190:    {
        -: 1191:      //reduce number of cards in hand
    #####: 1192:      state->handCount[currentPlayer]--;
        -: 1193:    }
        -: 1194:  else 	
        -: 1195:    {
        -: 1196:      //replace discarded card with last card in hand
        6: 1197:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1198:      //set last card to -1
        6: 1199:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1200:      //reduce number of cards in hand
        6: 1201:      state->handCount[currentPlayer]--;
        -: 1202:    }
        -: 1203:	
        6: 1204:  return 0;
        -: 1205:}
        -: 1206:
function gainCard called 7 returned 100% blocks executed 70%
        7: 1207:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1208:{
        -: 1209:  //Note: supplyPos is enum of choosen card
        -: 1210:	
        -: 1211:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1212:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1213:    {
    #####: 1214:      return -1;
        -: 1215:    }
        -: 1216:	
        -: 1217:  //added card for [whoseTurn] current player:
        -: 1218:  // toFlag = 0 : add to discard
        -: 1219:  // toFlag = 1 : add to deck
        -: 1220:  // toFlag = 2 : add to hand
        -: 1221:
        7: 1222:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1223:    {
    #####: 1224:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1225:      state->deckCount[player]++;
        -: 1226:    }
        7: 1227:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1228:    {
        7: 1229:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        7: 1230:      state->handCount[player]++;
        -: 1231:    }
        -: 1232:  else
        -: 1233:    {
    #####: 1234:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1235:      state->discardCount[player]++;
        -: 1236:    }
        -: 1237:	
        -: 1238:  //decrease number in supply pile
        7: 1239:  state->supplyCount[supplyPos]--;
        -: 1240:	 
        7: 1241:  return 0;
        -: 1242:}
        -: 1243:
function updateCoins called 17 returned 100% blocks executed 100%
       17: 1244:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1245:{
        -: 1246:  int i;
        -: 1247:	
        -: 1248:  //reset coin count
       17: 1249:  state->coins = 0;
        -: 1250:
        -: 1251:  //add coins for each Treasure card in player's hand
      106: 1252:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1253:    {
       89: 1254:      if (state->hand[player][i] == copper)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1255:	{
       68: 1256:	  state->coins += 1;
        -: 1257:	}
       21: 1258:      else if (state->hand[player][i] == silver)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -: 1259:	{
        5: 1260:	  state->coins += 2;
        -: 1261:	}
       16: 1262:      else if (state->hand[player][i] == gold)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1263:	{
        5: 1264:	  state->coins += 3;
        -: 1265:	}	
        -: 1266:    }	
        -: 1267:
        -: 1268:  //add bonus
       17: 1269:  state->coins += bonus;
        -: 1270:
       17: 1271:  return 0;
        -: 1272:}
        -: 1273:
        -: 1274:
function playAdventurer called 3 returned 100% blocks executed 64%
        3: 1275:void playAdventurer(struct gameState *state, int currentPlayer, int *temphand){
        3: 1276:	int drawntreasure=0;
        -: 1277:	int cardDrawn;
        3: 1278:	int z = 0;// this is the counter for the temp hand
        -: 1279:
       12: 1280:	while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6: 1281:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1282:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1283:		}
        6: 1284:		drawCard(currentPlayer, state);
call    0 returned 100%
        6: 1285:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6: 1286:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        6: 1287:			drawntreasure++;
        -: 1288:        }
        -: 1289:		else{
    #####: 1290:			temphand[z]=cardDrawn;
    #####: 1291:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1292:		}
        -: 1293:    }
        6: 1294:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1295:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1296:	    z=z-1;
        -: 1297:	}
        3: 1298:}
        -: 1299:
        -: 1300:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1301:void playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1302:	//+3 Cards
        2: 1303:	int i = 0;
       10: 1304:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1305:	{
        8: 1306:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1307:	}
        -: 1308:		
        -: 1309:	//discard card from hand
        2: 1310:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1311:}
        -: 1312:
        -: 1313:
function playGardens called 0 returned 0% blocks executed 0%
    #####: 1314:int playGardens(){
    #####: 1315:	return -1;
        -: 1316:}
        -: 1317:
        -: 1318:
function playSea_hag called 0 returned 0% blocks executed 0%
    #####: 1319:void playSea_hag(struct gameState *state, int currentPlayer){
        -: 1320:	int i;
    #####: 1321:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1322:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1323:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1324:			state->deckCount[i]--;
    #####: 1325:			state->discardCount[i]++;
    #####: 1326:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1327:		}
    #####: 1328:		else if (i == currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1329:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1330:			state->deckCount[i]--;
    #####: 1331:			state->discardCount[i]++;
        -: 1332:		}
        -: 1333:	}
    #####: 1334:}
        -: 1335:
        -: 1336:
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1337:int playRemodel(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
    #####: 1338:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1339:
    #####: 1340:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1341:	{
    #####: 1342:	  return -1;
        -: 1343:	}
        -: 1344:
    #####: 1345:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1346:
        -: 1347:      //discard card from hand
    #####: 1348:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1349:
        -: 1350:      //discard trashed card
    #####: 1351:	  int i = 0;
    #####: 1352:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1353:	{
    #####: 1354:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1355:	    {
    #####: 1356:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1357:	      break;
        -: 1358:	    }
        -: 1359:	}
        -: 1360:	
    #####: 1361:	return 0;
        -: 1362:}
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
